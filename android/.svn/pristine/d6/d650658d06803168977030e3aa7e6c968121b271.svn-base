
package android.databinding;
import com.gshl.tea.BR;
class DataBinderMapper {
    final static int TARGET_MIN_SDK = 15;
    public DataBinderMapper() {
    }
    public android.databinding.ViewDataBinding getDataBinder(android.databinding.DataBindingComponent bindingComponent, android.view.View view, int layoutId) {
        switch(layoutId) {
                case com.gshl.tea.R.layout.good_layout:
                    return com.gshl.tea.databinding.GoodLayoutBinding.bind(view, bindingComponent);
                case com.gshl.tea.R.layout.order_layout:
                    return com.gshl.tea.databinding.OrderLayoutBinding.bind(view, bindingComponent);
                case com.gshl.tea.R.layout.base_layout:
                    return com.gshl.tea.databinding.BaseLayoutBinding.bind(view, bindingComponent);
                case com.gshl.tea.R.layout.shop_car_layout:
                    return com.gshl.tea.databinding.ShopCarLayoutBinding.bind(view, bindingComponent);
                case com.gshl.tea.R.layout.hot_seller_item_layout:
                    return com.gshl.tea.databinding.HotSellerItemLayoutBinding.bind(view, bindingComponent);
                case com.gshl.tea.R.layout.good_item_layout:
                    return com.gshl.tea.databinding.GoodItemLayoutBinding.bind(view, bindingComponent);
                case com.gshl.tea.R.layout.history_head:
                    return com.gshl.tea.databinding.HistoryHeadBinding.bind(view, bindingComponent);
                case com.gshl.tea.R.layout.home_layout:
                    return com.gshl.tea.databinding.HomeLayoutBinding.bind(view, bindingComponent);
                case com.gshl.tea.R.layout.activity_search:
                    return com.gshl.tea.databinding.ActivitySearchBinding.bind(view, bindingComponent);
                case com.gshl.tea.R.layout.activity_main:
                    return com.gshl.tea.databinding.ActivityMainBinding.bind(view, bindingComponent);
                case com.gshl.tea.R.layout.me_layout:
                    return com.gshl.tea.databinding.MeLayoutBinding.bind(view, bindingComponent);
                case com.gshl.tea.R.layout.history_item:
                    return com.gshl.tea.databinding.HistoryItemBinding.bind(view, bindingComponent);
                case com.gshl.tea.R.layout.category_item:
                    return com.gshl.tea.databinding.CategoryItemBinding.bind(view, bindingComponent);
        }
        return null;
    }
    android.databinding.ViewDataBinding getDataBinder(android.databinding.DataBindingComponent bindingComponent, android.view.View[] views, int layoutId) {
        switch(layoutId) {
        }
        return null;
    }
    int getLayoutId(String tag) {
        if (tag == null) {
            return 0;
        }
        final int code = tag.hashCode();
        switch(code) {
            case -800766088: {
                if(tag.equals("layout/good_layout_0")) {
                    return com.gshl.tea.R.layout.good_layout;
                }
                break;
            }
            case 2129359793: {
                if(tag.equals("layout/order_layout_0")) {
                    return com.gshl.tea.R.layout.order_layout;
                }
                break;
            }
            case 64706532: {
                if(tag.equals("layout/base_layout_0")) {
                    return com.gshl.tea.R.layout.base_layout;
                }
                break;
            }
            case -1396212886: {
                if(tag.equals("layout/shop_car_layout_0")) {
                    return com.gshl.tea.R.layout.shop_car_layout;
                }
                break;
            }
            case 1153780542: {
                if(tag.equals("layout/hot_seller_item_layout_0")) {
                    return com.gshl.tea.R.layout.hot_seller_item_layout;
                }
                break;
            }
            case -1280284918: {
                if(tag.equals("layout/good_item_layout_0")) {
                    return com.gshl.tea.R.layout.good_item_layout;
                }
                break;
            }
            case -11470559: {
                if(tag.equals("layout/history_head_0")) {
                    return com.gshl.tea.R.layout.history_head;
                }
                break;
            }
            case -1991747178: {
                if(tag.equals("layout/home_layout_0")) {
                    return com.gshl.tea.R.layout.home_layout;
                }
                break;
            }
            case 101625572: {
                if(tag.equals("layout/activity_search_0")) {
                    return com.gshl.tea.R.layout.activity_search;
                }
                break;
            }
            case 423753077: {
                if(tag.equals("layout/activity_main_0")) {
                    return com.gshl.tea.R.layout.activity_main;
                }
                break;
            }
            case 1209973693: {
                if(tag.equals("layout/me_layout_0")) {
                    return com.gshl.tea.R.layout.me_layout;
                }
                break;
            }
            case 31139220: {
                if(tag.equals("layout/history_item_0")) {
                    return com.gshl.tea.R.layout.history_item;
                }
                break;
            }
            case -1133086848: {
                if(tag.equals("layout/category_item_0")) {
                    return com.gshl.tea.R.layout.category_item;
                }
                break;
            }
        }
        return 0;
    }
    String convertBrIdToString(int id) {
        if (id < 0 || id >= InnerBrLookup.sKeys.length) {
            return null;
        }
        return InnerBrLookup.sKeys[id];
    }
    private static class InnerBrLookup {
        static String[] sKeys = new String[]{
            "_all"
            ,"category"
            ,"categoryAdapter"
            ,"click"
            ,"dbUtils"
            ,"getFocus"
            ,"goBack"
            ,"good"
            ,"goodAdapter"
            ,"history"
            ,"historyRVAdapter"
            ,"hotSeller"
            ,"hotSellerAdapter"
            ,"hotSellerLayoutManager"
            ,"jumpToSeach"
            ,"marquee"
            ,"price"
            ,"rvManager"
            ,"rvManagerLinear"
            ,"value"};
    }
}