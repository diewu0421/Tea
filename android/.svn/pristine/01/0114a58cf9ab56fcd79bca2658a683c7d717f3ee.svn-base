package com.gshl.tea.databinding;
import com.gshl.tea.R;
import com.gshl.tea.BR;
import android.view.View;
public class CategoryItemBinding extends android.databinding.ViewDataBinding  {

    private static final android.databinding.ViewDataBinding.IncludedLayouts sIncludes;
    private static final android.util.SparseIntArray sViewsWithIds;
    static {
        sIncludes = null;
        sViewsWithIds = null;
    }
    // views
    private final android.widget.LinearLayout mboundView0;
    private final android.widget.TextView mboundView1;
    // variables
    private com.gshl.tea.module.good.bean.Category mCategory;
    // values
    // listeners
    private OnClickListenerImpl mAndroidViewViewOnCl;
    // Inverse Binding Event Handlers

    public CategoryItemBinding(android.databinding.DataBindingComponent bindingComponent, View root) {
        super(bindingComponent, root, 1);
        final Object[] bindings = mapBindings(bindingComponent, root, 2, sIncludes, sViewsWithIds);
        this.mboundView0 = (android.widget.LinearLayout) bindings[0];
        this.mboundView0.setTag(null);
        this.mboundView1 = (android.widget.TextView) bindings[1];
        this.mboundView1.setTag(null);
        setRootTag(root);
        // listeners
        invalidateAll();
    }

    @Override
    public void invalidateAll() {
        synchronized(this) {
                mDirtyFlags = 0x4L;
        }
        requestRebind();
    }

    @Override
    public boolean hasPendingBindings() {
        synchronized(this) {
            if (mDirtyFlags != 0) {
                return true;
            }
        }
        return false;
    }

    public boolean setVariable(int variableId, Object variable) {
        switch(variableId) {
            case BR.category :
                setCategory((com.gshl.tea.module.good.bean.Category) variable);
                return true;
        }
        return false;
    }

    public void setCategory(com.gshl.tea.module.good.bean.Category category) {
        updateRegistration(0, category);
        this.mCategory = category;
        synchronized(this) {
            mDirtyFlags |= 0x1L;
        }
        notifyPropertyChanged(BR.category);
        super.requestRebind();
    }
    public com.gshl.tea.module.good.bean.Category getCategory() {
        return mCategory;
    }

    @Override
    protected boolean onFieldChange(int localFieldId, Object object, int fieldId) {
        switch (localFieldId) {
            case 0 :
                return onChangeCategory((com.gshl.tea.module.good.bean.Category) object, fieldId);
        }
        return false;
    }
    private boolean onChangeCategory(com.gshl.tea.module.good.bean.Category category, int fieldId) {
        switch (fieldId) {
            case BR.click: {
                synchronized(this) {
                        mDirtyFlags |= 0x2L;
                }
                return true;
            }
            case BR._all: {
                synchronized(this) {
                        mDirtyFlags |= 0x1L;
                }
                return true;
            }
        }
        return false;
    }

    @Override
    protected void executeBindings() {
        long dirtyFlags = 0;
        synchronized(this) {
            dirtyFlags = mDirtyFlags;
            mDirtyFlags = 0;
        }
        int isClickCategoryInt0x = 0;
        java.lang.String nameCategory = null;
        com.gshl.tea.module.good.bean.Category category = mCategory;
        int IsClickCategoryInt0x1 = 0;
        boolean isClickCategory = false;
        android.view.View.OnClickListener androidViewViewOnCli = null;

        if ((dirtyFlags & 0x7L) != 0) {


            if ((dirtyFlags & 0x5L) != 0) {

                    if (category != null) {
                        // read category.name
                        nameCategory = category.getName();
                        // read category::onCategoryItemClick
                        androidViewViewOnCli = (((mAndroidViewViewOnCl == null) ? (mAndroidViewViewOnCl = new OnClickListenerImpl()) : mAndroidViewViewOnCl).setValue(category));
                    }
            }

                if (category != null) {
                    // read category.isClick
                    isClickCategory = category.isClick();
                }
                if((dirtyFlags & 0x7L) != 0) {
                    if (isClickCategory) {
                        dirtyFlags |= 0x10L;
                        dirtyFlags |= 0x40L;
                    } else {
                        dirtyFlags |= 0x8L;
                        dirtyFlags |= 0x20L;
                    }}


                // read category.isClick ? 0xFFFF6243 : 0xFF000000
                isClickCategoryInt0x = (isClickCategory) ? (0xFFFF6243) : (0xFF000000);
                // read category.isClick ? 0xFFF4F4F4 : 0xFFFFFFFF
                IsClickCategoryInt0x1 = (isClickCategory) ? (0xFFF4F4F4) : (0xFFFFFFFF);
        }
        // batch finished
        if ((dirtyFlags & 0x7L) != 0) {
            // api target 1

            android.databinding.adapters.ViewBindingAdapter.setBackground(this.mboundView0, android.databinding.adapters.Converters.convertColorToDrawable(IsClickCategoryInt0x1));
            this.mboundView1.setTextColor(isClickCategoryInt0x);
        }
        if ((dirtyFlags & 0x5L) != 0) {
            // api target 1

            this.mboundView0.setOnClickListener(androidViewViewOnCli);
            android.databinding.adapters.TextViewBindingAdapter.setText(this.mboundView1, nameCategory);
        }
    }
    // Listener Stub Implementations
    public static class OnClickListenerImpl implements android.view.View.OnClickListener{
        private com.gshl.tea.module.good.bean.Category value;
        public OnClickListenerImpl setValue(com.gshl.tea.module.good.bean.Category value) {
            this.value = value;
            return value == null ? null : this;
        }
        @Override
        public void onClick(android.view.View arg0) {
            this.value.onCategoryItemClick(arg0);
        }
    }
    // callback impls
    // dirty flag
    private  long mDirtyFlags = 0xffffffffffffffffL;

    public static CategoryItemBinding inflate(android.view.LayoutInflater inflater, android.view.ViewGroup root, boolean attachToRoot) {
        return inflate(inflater, root, attachToRoot, android.databinding.DataBindingUtil.getDefaultComponent());
    }
    public static CategoryItemBinding inflate(android.view.LayoutInflater inflater, android.view.ViewGroup root, boolean attachToRoot, android.databinding.DataBindingComponent bindingComponent) {
        return android.databinding.DataBindingUtil.<CategoryItemBinding>inflate(inflater, com.gshl.tea.R.layout.category_item, root, attachToRoot, bindingComponent);
    }
    public static CategoryItemBinding inflate(android.view.LayoutInflater inflater) {
        return inflate(inflater, android.databinding.DataBindingUtil.getDefaultComponent());
    }
    public static CategoryItemBinding inflate(android.view.LayoutInflater inflater, android.databinding.DataBindingComponent bindingComponent) {
        return bind(inflater.inflate(com.gshl.tea.R.layout.category_item, null, false), bindingComponent);
    }
    public static CategoryItemBinding bind(android.view.View view) {
        return bind(view, android.databinding.DataBindingUtil.getDefaultComponent());
    }
    public static CategoryItemBinding bind(android.view.View view, android.databinding.DataBindingComponent bindingComponent) {
        if (!"layout/category_item_0".equals(view.getTag())) {
            throw new RuntimeException("view tag isn't correct on view:" + view.getTag());
        }
        return new CategoryItemBinding(bindingComponent, view);
    }
    /* flag mapping
        flag 0 (0x1L): category
        flag 1 (0x2L): category.isClick
        flag 2 (0x3L): null
        flag 3 (0x4L): category.isClick ? 0xFFFF6243 : 0xFF000000
        flag 4 (0x5L): category.isClick ? 0xFFFF6243 : 0xFF000000
        flag 5 (0x6L): category.isClick ? 0xFFF4F4F4 : 0xFFFFFFFF
        flag 6 (0x7L): category.isClick ? 0xFFF4F4F4 : 0xFFFFFFFF
    flag mapping end*/
    //end
}